/*
 * Copyright (c) 2019-2021, JetBrains s.r.o. and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation. JetBrains designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact JetBrains, Na Hrebenech II 1718/10, Prague, 14000, Czech Republic
 * if you need additional information or have any questions.
 */

import java.util.zip.ZipFile

plugins {
  id("org.jetbrains.kotlin.jvm")
  id("application")
  id("maven-publish")
}

application {
  mainClassName = "org.jetbrains.projector.server.ProjectorLauncher"
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
    }
  }
}

configurations.all {
  // disable caching of -SNAPSHOT dependencies
  resolutionStrategy.cacheChangingModulesFor(0, "seconds")
}

dependencies {
  implementation("com.github.JetBrains.projector-client:projector-common:$projectorClientVersion")
  implementation("com.github.JetBrains.projector-client:projector-server-core:$projectorClientVersion")
  implementation("com.github.JetBrains.projector-client:projector-util-logging:$projectorClientVersion")
  api project(":projector-awt")

  testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"

  // todo: remove this dependencies: they should be exported from projector-common but now it seems not working
  testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
  testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
}

jar {
  manifest {
    attributes(
      "Main-Class": application.mainClassName,
      )
  }
}

//Server running tasks
Properties localProperties = new Properties()
if (project.rootProject.file('local.properties').canRead()) {
  localProperties.load(project.rootProject.file("local.properties").newDataInputStream())
}

// relay arguments
def relayURL=localProperties['projector.relayUrl']
def serverId=localProperties['projector.serverId']

def relayArgs = []

if (relayURL!=null && serverId != null) {
  relayArgs = ["-Dprojector.relayUrl=$relayURL", "-Dprojector.serverId=$serverId"]
}


def serverTargetClasspath = localProperties['projectorLauncher.targetClassPath']
def serverClassToLaunch = localProperties['projectorLauncher.classToLaunch']
println("----------- Server launch config ---------------")
println("Classpath: $serverTargetClasspath")
println("ClassToLaunch: $serverClassToLaunch")
println("------------------------------------------------")
if (serverTargetClasspath != null && serverClassToLaunch != null) {
  task runServer(type: JavaExec) {
    group = "projector"
    main = "org.jetbrains.projector.server.ProjectorLauncher"
    classpath(sourceSets.main.runtimeClasspath, jar, "$serverTargetClasspath")
    jvmArgs = [
      "-Dorg.jetbrains.projector.server.classToLaunch=$serverClassToLaunch",
      "--add-opens=java.desktop/java.awt=ALL-UNNAMED",
      "--add-opens=java.desktop/sun.font=ALL-UNNAMED",
      "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
    ] + relayArgs
  }
}

def ideaPath = localProperties['projectorLauncher.ideaPath']
println("----------- Idea launch config ---------------")
println("Idea path: $ideaPath")
println("------------------------------------------------")
if (ideaPath != null) {
  def ideaLib = "$ideaPath/lib"
  def ideaClassPath = "$ideaLib/bootstrap.jar:$ideaLib/extensions.jar:$ideaLib/util.jar:$ideaLib/jdom.jar:$ideaLib/log4j.jar:$ideaLib/trove4j.jar:$ideaLib/trove4j.jar"
  def jdkHome = System.getProperty('java.home')
  println(jdkHome)

  def ideaPathsSelector = "ProjectorIntelliJIdea"

  task runIdeaServer(type: JavaExec) {
    group = "projector"
    main = "org.jetbrains.projector.server.ProjectorLauncher"
    classpath(sourceSets.main.runtimeClasspath, jar, "$ideaClassPath", "$jdkHome/../lib/tools.jar")
    jvmArgs = [
      "-Dorg.jetbrains.projector.server.classToLaunch=com.intellij.idea.Main",
      "-Didea.paths.selector=$ideaPathsSelector",
      "-Didea.jre.check=true",
      "-Didea.is.internal=true",
      "--add-exports=java.base/jdk.internal.vm=ALL-UNNAMED",
      "--add-opens=java.desktop/java.awt=ALL-UNNAMED",
      "--add-opens=java.desktop/sun.font=ALL-UNNAMED",
      "--add-opens=java.desktop/sun.awt=ALL-UNNAMED",
      "--add-opens=java.desktop/sun.swing=ALL-UNNAMED",
      "--add-opens=java.desktop/javax.swing=ALL-UNNAMED",
      "--add-opens=java.desktop/javax.swing.text.html=ALL-UNNAMED",
      "--add-opens=java.desktop/javax.swing.plaf.basic=ALL-UNNAMED",
      "--add-opens=java.base/java.lang=ALL-UNNAMED",
      "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
      "-Djdk.attach.allowAttachSelf=true",
    ] + relayArgs
  }
}

def fontsPath = "src/main/resources/fonts"

task downloadCjkFonts {
  def defaultFontsLink = "https://noto-website-2.storage.googleapis.com/pkgs/NotoSansCJKjp-hinted.zip"

  doLast {
    def requiredFonts = ["CJK-R"].stream().map { "$fontsPath/${it}.otf" }.collect()

    println("Checking CJK fonts: $requiredFonts")

    def haveAll = requiredFonts.stream().allMatch { project.file(it).exists() }

    if (haveAll) {
      println("CJK fonts already exist, skipping download.")
    }
    else {
      println("Some CJK fonts are missing, downloading... If some fonts exist, they will be overwritten.")

      project.file(fontsPath).mkdirs()

      def url = new URL(defaultFontsLink)
      def tempFile = File.createTempFile("cjkFonts", "zip")
      url.withInputStream { i -> tempFile.withOutputStream { it << i } }

      def originalToDest = [
        "NotoSansCJKjp-Regular" : "CJK-R",
      ]

      def zipFile = new ZipFile(tempFile)

      originalToDest.forEach { original, dest ->
        def destFile = project.file("$fontsPath/${dest}.otf")
        def srcPath = "${original}.otf"

        destFile.delete()
        destFile.createNewFile()

        destFile.withOutputStream { it << zipFile.getInputStream(zipFile.getEntry(srcPath)) }
      }

      tempFile.delete()

      println("Download complete")
    }
  }
}

task downloadDefaultFonts {
  def defaultFontsLink = "https://noto-website-2.storage.googleapis.com/pkgs/NotoSans-hinted.zip"

  doLast {
    def requiredFonts = ["Default-R", "Default-RI", "Default-B", "Default-BI"].stream().map { "$fontsPath/${it}.ttf" }.collect()

    println("Checking default fonts: $requiredFonts")

    def haveAll = requiredFonts.stream().allMatch { project.file(it).exists() }

    if (haveAll) {
      println("Default fonts already exist, skipping download.")
    }
    else {
      println("Some default fonts are missing, downloading... If some fonts exist, they will be overwritten.")

      project.file(fontsPath).mkdirs()

      def url = new URL(defaultFontsLink)
      def tempFile = File.createTempFile("defaultFonts", "zip")
      url.withInputStream { i -> tempFile.withOutputStream { it << i } }

      def originalToDest = [
        "NotoSans-Regular" : "Default-R",
        "NotoSans-Italic": "Default-RI",
        "NotoSans-Bold" : "Default-B",
        "NotoSans-BoldItalic": "Default-BI",
      ]

      def zipFile = new ZipFile(tempFile)

      originalToDest.forEach { original, dest ->
        def destFile = project.file("$fontsPath/${dest}.ttf")
        def srcPath = "${original}.ttf"

        destFile.delete()
        destFile.createNewFile()

        destFile.withOutputStream { it << zipFile.getInputStream(zipFile.getEntry(srcPath)) }
      }

      tempFile.delete()

      println("Download complete")
    }
  }
}

task downloadMonoFonts {
  def monoFontsLink = "https://download.jetbrains.com/fonts/JetBrainsMono-1.0.3.zip"

  doLast {
    def requiredFonts = ["Mono-R", "Mono-RI", "Mono-B", "Mono-BI"].stream().map { "$fontsPath/${it}.ttf" }.collect()

    println("Checking mono fonts: $requiredFonts")

    def haveAll = requiredFonts.stream().allMatch { project.file(it).exists() }

    if (haveAll) {
      println("Mono fonts already exist, skipping download.")
    }
    else {
      println("Some mono fonts are missing, downloading... If some fonts exist, they will be overwritten.")

      project.file(fontsPath).mkdirs()

      def url = new URL(monoFontsLink)
      def tempFile = File.createTempFile("monoFonts", "zip")
      url.withInputStream { i -> tempFile.withOutputStream { it << i } }

      def originalToDest = [
        "JetBrainsMono-Regular"    : "Mono-R",
        "JetBrainsMono-Italic"     : "Mono-RI",
        "JetBrainsMono-Bold"       : "Mono-B",
        "JetBrainsMono-Bold-Italic": "Mono-BI",
      ]

      def zipFile = new ZipFile(tempFile)

      originalToDest.forEach { original, dest ->
        def destFile = project.file("$fontsPath/${dest}.ttf")
        def srcPath = "JetBrainsMono-1.0.3/ttf/${original}.ttf"

        destFile.delete()
        destFile.createNewFile()

        destFile.withOutputStream { it << zipFile.getInputStream(zipFile.getEntry(srcPath)) }
      }

      tempFile.delete()

      println("Download complete")
    }
  }
}

task downloadFonts {
  dependsOn(downloadCjkFonts, downloadDefaultFonts, downloadMonoFonts)
}

// Modify existing task which puts resources to the target dir:
processResources {
  dependsOn(downloadFonts)
}
