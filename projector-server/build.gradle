/*
 * Copyright (c) 2019-2021, JetBrains s.r.o. and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation. JetBrains designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact JetBrains, Na Hrebenech II 1718/10, Prague, 14000, Czech Republic
 * if you need additional information or have any questions.
 */

import java.util.zip.ZipFile

plugins {
  id("org.jetbrains.kotlin.jvm")
  id("application")
  id("maven-publish")
}

application {
  mainClassName = "org.jetbrains.projector.server.ProjectorLauncher"
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
    }
  }
  repositories {
    maven {
      url "https://packages.jetbrains.team/maven/p/ij/intellij-dependencies"
      credentials(PasswordCredentials)
    }
  }
}

configurations.all {
  // disable caching of -SNAPSHOT dependencies
  resolutionStrategy.cacheChangingModulesFor(0, "seconds")
}

dependencies {
  implementation("$projectorClientGroup:projector-common:$projectorClientVersion")
  implementation("$projectorClientGroup:projector-server-core:$projectorClientVersion")
  implementation("$projectorClientGroup:projector-util-loading:$projectorClientVersion")
  implementation("$projectorClientGroup:projector-util-logging:$projectorClientVersion")
  api project(":projector-awt")

  compileOnly("com.jetbrains.intellij.platform:code-style:$intellijPlatformVersion")
  compileOnly("com.jetbrains.intellij.platform:core-ui:$intellijPlatformVersion")
  compileOnly("com.jetbrains.intellij.platform:ide-impl:$intellijPlatformVersion")

  testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
  testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
}

jar {
  manifest {
    attributes(
      "Main-Class": application.mainClassName,
      )
  }
  duplicatesStrategy = DuplicatesStrategy.WARN
}

//Server running tasks
Properties localProperties = new Properties()
if (project.rootProject.file('local.properties').canRead()) {
  localProperties.load(project.rootProject.file("local.properties").newDataInputStream())
}

// relay arguments
def relayURL=localProperties["ORG_JETBRAINS_PROJECTOR_SERVER_RELAY_URL"]
def serverId=localProperties["ORG_JETBRAINS_PROJECTOR_SERVER_RELAY_SERVER_ID"]

def relayArgs = []

if (relayURL!=null && serverId != null) {
  relayArgs = ["-DORG_JETBRAINS_PROJECTOR_SERVER_RELAY_URL=$relayURL", "-DORG_JETBRAINS_PROJECTOR_SERVER_RELAY_SERVER_ID=$serverId"]
}


def serverTargetClasspath = localProperties['projectorLauncher.targetClassPath']
def serverClassToLaunch = localProperties['projectorLauncher.classToLaunch']
println("----------- Server launch config ---------------")
println("Classpath: $serverTargetClasspath")
println("ClassToLaunch: $serverClassToLaunch")
println("------------------------------------------------")
if (serverTargetClasspath != null && serverClassToLaunch != null) {
  task runServer(type: JavaExec) {
    group = "projector"
    main = "org.jetbrains.projector.server.ProjectorLauncher"
    classpath(sourceSets.main.runtimeClasspath, jar, "$serverTargetClasspath")
    jvmArgs = [
      "-Dorg.jetbrains.projector.server.classToLaunch=$serverClassToLaunch",
      "--add-opens=java.desktop/java.awt=ALL-UNNAMED",
      "--add-opens=java.desktop/sun.font=ALL-UNNAMED",
      "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
    ] + relayArgs
  }
}

def ideaPath = localProperties['projectorLauncher.ideaPath']
println("----------- Idea launch config ---------------")
println("Idea path: $ideaPath")
println("------------------------------------------------")
if (ideaPath != null) {
  def ideaLib = "$ideaPath/lib"
  def ideaClassPath = "$ideaLib/bootstrap.jar:$ideaLib/extensions.jar:$ideaLib/util.jar:$ideaLib/jdom.jar:$ideaLib/log4j.jar:$ideaLib/trove4j.jar:$ideaLib/trove4j.jar"
  def jdkHome = System.getProperty('java.home')
  println(jdkHome)

  def ideaPathsSelector = "ProjectorIntelliJIdea"

  task runIdeaServer(type: JavaExec) {
    group = "projector"
    main = "org.jetbrains.projector.server.ProjectorLauncher"
    classpath(sourceSets.main.runtimeClasspath, jar, "$ideaClassPath", "$jdkHome/../lib/tools.jar")
    jvmArgs = [
      "-Dorg.jetbrains.projector.server.classToLaunch=com.intellij.idea.Main",
      "-Didea.paths.selector=$ideaPathsSelector",
      "-Didea.jre.check=true",
      "-Didea.is.internal=true",
      "--add-exports=java.base/jdk.internal.vm=ALL-UNNAMED",
      "--add-opens=java.desktop/java.awt=ALL-UNNAMED",
      "--add-opens=java.desktop/sun.font=ALL-UNNAMED",
      "--add-opens=java.desktop/sun.awt=ALL-UNNAMED",
      "--add-opens=java.desktop/sun.swing=ALL-UNNAMED",
      "--add-opens=java.desktop/javax.swing=ALL-UNNAMED",
      "--add-opens=java.desktop/javax.swing.text.html=ALL-UNNAMED",
      "--add-opens=java.desktop/javax.swing.plaf.basic=ALL-UNNAMED",
      "--add-opens=java.base/java.lang=ALL-UNNAMED",
      "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
      "-Djdk.attach.allowAttachSelf=true",
    ] + relayArgs
  }
}

def downloadFontsInZip(
  String name,
  String zipUrl,
  Map<String, String> originalToDest
) {
  // todo: when rewriting this build script to Kotlin, make this function create a task
  def fontsPath = "src/main/resources/fonts"
  def requiredFonts = originalToDest.values().stream().map { "$fontsPath/$it" }.collect()

  println("Checking $name fonts: $requiredFonts")

  def haveAll = requiredFonts.stream().allMatch { project.file(it).exists() }

  if (haveAll) {
    println("$name fonts already exist, skipping download.")
  }
  else {
    println("Some $name fonts are missing, downloading... If some fonts exist, they will be overwritten.")

    project.file(fontsPath).mkdirs()

    def url = new URL(zipUrl)
    def tempFile = File.createTempFile("${name}-fonts", "zip")
    url.withInputStream { i -> tempFile.withOutputStream { it << i } }

    def zipFile = new ZipFile(tempFile)

    originalToDest.forEach { srcPath, dest ->
      def destFile = project.file("$fontsPath/$dest")

      destFile.delete()
      destFile.createNewFile()

      destFile.withOutputStream { it << zipFile.getInputStream(zipFile.getEntry(srcPath)) }
    }

    tempFile.delete()

    println("Download complete")
  }

}

task downloadCjkFonts {
  doLast {
    downloadFontsInZip(
      "CJK",
      "https://noto-website-2.storage.googleapis.com/pkgs/NotoSansCJKjp-hinted.zip",
      [
        "NotoSansCJKjp-Regular.otf" : "CJK-R.otf",
      ]
    )
  }
}

task downloadDefaultFonts {
  doLast {
    downloadFontsInZip(
      "default",
      "https://noto-website-2.storage.googleapis.com/pkgs/NotoSans-hinted.zip",
      [
        "NotoSans-Regular.ttf" : "Default-R.ttf",
        "NotoSans-Italic.ttf": "Default-RI.ttf",
        "NotoSans-Bold.ttf" : "Default-B.ttf",
        "NotoSans-BoldItalic.ttf": "Default-BI.ttf",
      ]
    )
  }
}

task downloadMonoFonts {
  doLast {
    downloadFontsInZip(
      "mono",
      "https://download.jetbrains.com/fonts/JetBrainsMono-1.0.3.zip",
      [
        "JetBrainsMono-1.0.3/ttf/JetBrainsMono-Regular.ttf"    : "Mono-R.ttf",
        "JetBrainsMono-1.0.3/ttf/JetBrainsMono-Italic.ttf"     : "Mono-RI.ttf",
        "JetBrainsMono-1.0.3/ttf/JetBrainsMono-Bold.ttf"       : "Mono-B.ttf",
        "JetBrainsMono-1.0.3/ttf/JetBrainsMono-Bold-Italic.ttf": "Mono-BI.ttf",
      ]
    )
  }
}

task downloadFonts {
  dependsOn(downloadCjkFonts, downloadDefaultFonts, downloadMonoFonts)
}

// Modify existing task which puts resources to the target dir:
processResources {
  dependsOn(downloadFonts)
}
